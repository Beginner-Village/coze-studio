/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by hertz generator.

package modelmgr

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	modelmgr "github.com/coze-dev/coze-studio/backend/api/model/ocean/cloud/modelmgr"
	modelmgrApp "github.com/coze-dev/coze-studio/backend/application/modelmgr"
)

// CreateModel .
// @router /api/model/create [POST]
func CreateModel(ctx context.Context, c *app.RequestContext) {
	var err error
	var req modelmgr.CreateModelRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(modelmgr.CreateModelResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetModel .
// @router /api/model/detail [POST]
func GetModel(ctx context.Context, c *app.RequestContext) {
	var err error
	var req modelmgr.GetModelRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(modelmgr.GetModelResponse)

	c.JSON(consts.StatusOK, resp)
}

// ListModels .
// @router /api/model/list [POST]
func ListModels(ctx context.Context, c *app.RequestContext) {
	var err error
	var req modelmgr.ListModelsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 调用应用服务获取模型列表
	resp, err := modelmgrApp.ModelmgrApplicationSVC.ListModels(ctx, &req)
	if err != nil {
		// 记录错误日志
		// logs.CtxErrorf(ctx, "failed to list models: %v", err)

		// 返回错误响应
		errorResp := &modelmgr.ListModelsResponse{
			Data:       nil,
			TotalCount: nil,
			Code:       500,
			Msg:        "Internal server error: " + err.Error(),
		}
		c.JSON(consts.StatusInternalServerError, errorResp)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// UpdateModel .
// @router /api/model/update [POST]
func UpdateModel(ctx context.Context, c *app.RequestContext) {
	var err error
	var req modelmgr.UpdateModelRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(modelmgr.UpdateModelResponse)

	c.JSON(consts.StatusOK, resp)
}

// DeleteModel .
// @router /api/model/delete [POST]
func DeleteModel(ctx context.Context, c *app.RequestContext) {
	var err error
	var req modelmgr.DeleteModelRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(modelmgr.DeleteModelResponse)

	c.JSON(consts.StatusOK, resp)
}

// AddModelToSpace .
// @router /api/model/space/add [POST]
func AddModelToSpace(ctx context.Context, c *app.RequestContext) {
	var err error
	var req modelmgr.AddModelToSpaceRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(modelmgr.AddModelToSpaceResponse)

	c.JSON(consts.StatusOK, resp)
}

// RemoveModelFromSpace .
// @router /api/model/space/remove [POST]
func RemoveModelFromSpace(ctx context.Context, c *app.RequestContext) {
	var err error
	var req modelmgr.RemoveModelFromSpaceRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(modelmgr.RemoveModelFromSpaceResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateSpaceModelConfig .
// @router /api/model/space/config/update [POST]
func UpdateSpaceModelConfig(ctx context.Context, c *app.RequestContext) {
	var err error
	var req modelmgr.UpdateSpaceModelConfigRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(modelmgr.UpdateSpaceModelConfigResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetSpaceModelConfig .
// @router /api/model/space/config/get [POST]
func GetSpaceModelConfig(ctx context.Context, c *app.RequestContext) {
	var err error
	var req modelmgr.GetSpaceModelConfigRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(modelmgr.GetSpaceModelConfigResponse)

	c.JSON(consts.StatusOK, resp)
}

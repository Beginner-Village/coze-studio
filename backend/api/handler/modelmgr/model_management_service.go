/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by hertz generator.

package modelmgr

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	modelmgr "github.com/coze-dev/coze-studio/backend/api/model/modelmgr"
	modelmgrApp "github.com/coze-dev/coze-studio/backend/application/modelmgr"
)

// CreateModel .
// @router /api/model/create [POST]
func CreateModel(ctx context.Context, c *app.RequestContext) {
	var err error
	var req modelmgr.CreateModelRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 调用业务逻辑
	detail, err := modelmgrApp.ModelmgrApplicationSVC.CreateModel(ctx, &req)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp := &modelmgr.CreateModelResponse{
		Code: 0,
		Msg:  "success",
		Data: detail,
	}

	c.JSON(consts.StatusOK, resp)
}

// GetModel .
// @router /api/model/detail [POST]
func GetModel(ctx context.Context, c *app.RequestContext) {
	var err error
	var req modelmgr.GetModelRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 调用业务逻辑
	detail, err := modelmgrApp.ModelmgrApplicationSVC.GetModel(ctx, req.ModelID)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp := &modelmgr.GetModelResponse{
		Code: 0,
		Msg:  "success",
		Data: detail,
	}

	c.JSON(consts.StatusOK, resp)
}

// ListModels .
// @router /api/model/list [POST]
func ListModels(ctx context.Context, c *app.RequestContext) {
	var err error
	var req modelmgr.ListModelsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 调用业务逻辑
	resp, err := modelmgrApp.ModelmgrApplicationSVC.ListModels(ctx, &req)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// UpdateModel .
// @router /api/model/update [POST]
func UpdateModel(ctx context.Context, c *app.RequestContext) {
	var err error
	var req modelmgr.UpdateModelRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 调用业务逻辑
	detail, err := modelmgrApp.ModelmgrApplicationSVC.UpdateModel(ctx, &req)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp := &modelmgr.UpdateModelResponse{
		Code: 0,
		Msg:  "success",
		Data: detail,
	}

	c.JSON(consts.StatusOK, resp)
}

// DeleteModel .
// @router /api/model/delete [POST]
func DeleteModel(ctx context.Context, c *app.RequestContext) {
	var err error
	var req modelmgr.DeleteModelRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 调用业务逻辑
	err = modelmgrApp.ModelmgrApplicationSVC.DeleteModel(ctx, req.ModelID)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp := &modelmgr.DeleteModelResponse{
		Code: 0,
		Msg:  "success",
	}

	c.JSON(consts.StatusOK, resp)
}

// AddModelToSpace .
// @router /api/model/space/add [POST]
func AddModelToSpace(ctx context.Context, c *app.RequestContext) {
	var err error
	var req modelmgr.AddModelToSpaceRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 调用业务逻辑 (暂时使用固定用户ID，待后续从上下文获取)
	err = modelmgrApp.ModelmgrApplicationSVC.AddModelToSpace(ctx, req.SpaceID, req.ModelID, 1)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp := &modelmgr.AddModelToSpaceResponse{
		Code: 0,
		Msg:  "success",
	}

	c.JSON(consts.StatusOK, resp)
}

// RemoveModelFromSpace .
// @router /api/model/space/remove [POST]
func RemoveModelFromSpace(ctx context.Context, c *app.RequestContext) {
	var err error
	var req modelmgr.RemoveModelFromSpaceRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 调用业务逻辑
	err = modelmgrApp.ModelmgrApplicationSVC.RemoveModelFromSpace(ctx, req.SpaceID, req.ModelID)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp := &modelmgr.RemoveModelFromSpaceResponse{
		Code: 0,
		Msg:  "success",
	}

	c.JSON(consts.StatusOK, resp)
}

// UpdateSpaceModelConfig .
// @router /api/model/space/config/update [POST]
func UpdateSpaceModelConfig(ctx context.Context, c *app.RequestContext) {
	var err error
	var req modelmgr.UpdateSpaceModelConfigRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 调用业务逻辑
	var config map[string]interface{}
	if req.CustomConfig != nil {
		// 暂时返回空配置，等待具体业务逻辑实现
		config = make(map[string]interface{})
	}
	err = modelmgrApp.ModelmgrApplicationSVC.UpdateSpaceModelConfig(ctx, req.SpaceID, req.ModelID, config)
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp := &modelmgr.UpdateSpaceModelConfigResponse{
		Code: 0,
		Msg:  "success",
	}

	c.JSON(consts.StatusOK, resp)
}

// GetSpaceModelConfig .
// @router /api/model/space/config/get [POST]
func GetSpaceModelConfig(ctx context.Context, c *app.RequestContext) {
	var err error
	var req modelmgr.GetSpaceModelConfigRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 暂时返回空配置，等待具体业务逻辑实现
	resp := &modelmgr.GetSpaceModelConfigResponse{
		Code: 0,
		Msg:  "success",
		Data: nil,
	}

	c.JSON(consts.StatusOK, resp)
}

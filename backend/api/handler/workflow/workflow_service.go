/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by hertz generator.

package workflow

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	base "github.com/coze-dev/coze-studio/backend/api/model/base"
	workflow "github.com/coze-dev/coze-studio/backend/api/model/workflow"
)

// CreateWorkflow .
// @router /api/workflow_api/create [POST]
func CreateWorkflow(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.CreateWorkflowRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.CreateWorkflowResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetCanvasInfo .
// @router /api/workflow_api/canvas [POST]
func GetCanvasInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.GetCanvasInfoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.GetCanvasInfoResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetHistorySchema .
// @router /api/workflow_api/history_schema [POST]
func GetHistorySchema(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.GetHistorySchemaRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.GetHistorySchemaResponse)

	c.JSON(consts.StatusOK, resp)
}

// SaveWorkflow .
// @router /api/workflow_api/save [POST]
func SaveWorkflow(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.SaveWorkflowRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.SaveWorkflowResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateWorkflowMeta .
// @router /api/workflow_api/update_meta [POST]
func UpdateWorkflowMeta(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.UpdateWorkflowMetaRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.UpdateWorkflowMetaResponse)

	c.JSON(consts.StatusOK, resp)
}

// DeleteWorkflow .
// @router /api/workflow_api/delete [POST]
func DeleteWorkflow(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.DeleteWorkflowRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.DeleteWorkflowResponse)

	c.JSON(consts.StatusOK, resp)
}

// BatchDeleteWorkflow .
// @router /api/workflow_api/batch_delete [POST]
func BatchDeleteWorkflow(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.BatchDeleteWorkflowRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.BatchDeleteWorkflowResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetDeleteStrategy .
// @router /api/workflow_api/delete_strategy [POST]
func GetDeleteStrategy(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.GetDeleteStrategyRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.GetDeleteStrategyResponse)

	c.JSON(consts.StatusOK, resp)
}

// PublishWorkflow .
// @router /api/workflow_api/publish [POST]
func PublishWorkflow(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.PublishWorkflowRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.PublishWorkflowResponse)

	c.JSON(consts.StatusOK, resp)
}

// CopyWorkflow .
// @router /api/workflow_api/copy [POST]
func CopyWorkflow(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.CopyWorkflowRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.CopyWorkflowResponse)

	c.JSON(consts.StatusOK, resp)
}

// CopyWkTemplateApi .
// @router /api/workflow_api/copy_wk_template [POST]
func CopyWkTemplateApi(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.CopyWkTemplateApiRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.CopyWkTemplateApiResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetReleasedWorkflows .
// @router /api/workflow_api/released_workflows [POST]
func GetReleasedWorkflows(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.GetReleasedWorkflowsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.GetReleasedWorkflowsResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetWorkflowReferences .
// @router /api/workflow_api/workflow_references [POST]
func GetWorkflowReferences(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.GetWorkflowReferencesRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.GetWorkflowReferencesResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetExampleWorkFlowList .
// @router /api/workflow_api/example_workflow_list [POST]
func GetExampleWorkFlowList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.GetExampleWorkFlowListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.GetExampleWorkFlowListResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetWorkFlowList .
// @router /api/workflow_api/workflow_list [POST]
func GetWorkFlowList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.GetWorkFlowListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.GetWorkFlowListResponse)

	c.JSON(consts.StatusOK, resp)
}

// QueryWorkflowNodeTypes .
// @router /api/workflow_api/node_type [POST]
func QueryWorkflowNodeTypes(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.QueryWorkflowNodeTypeRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.QueryWorkflowNodeTypeResponse)

	c.JSON(consts.StatusOK, resp)
}

// NodeTemplateList .
// @router /api/workflow_api/node_template_list [POST]
func NodeTemplateList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.NodeTemplateListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.NodeTemplateListResponse)

	c.JSON(consts.StatusOK, resp)
}

// NodePanelSearch .
// @router /api/workflow_api/node_panel_search [POST]
func NodePanelSearch(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.NodePanelSearchRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.NodePanelSearchResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetLLMNodeFCSettingsMerged .
// @router /api/workflow_api/llm_fc_setting_merged [POST]
func GetLLMNodeFCSettingsMerged(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.GetLLMNodeFCSettingsMergedRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.GetLLMNodeFCSettingsMergedResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetLLMNodeFCSettingDetail .
// @router /api/workflow_api/llm_fc_setting_detail [POST]
func GetLLMNodeFCSettingDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.GetLLMNodeFCSettingDetailRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.GetLLMNodeFCSettingDetailResponse)

	c.JSON(consts.StatusOK, resp)
}

// WorkFlowTestRun .
// @router /api/workflow_api/test_run [POST]
func WorkFlowTestRun(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.WorkFlowTestRunRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.WorkFlowTestRunResponse)

	c.JSON(consts.StatusOK, resp)
}

// WorkFlowTestResume .
// @router /api/workflow_api/test_resume [POST]
func WorkFlowTestResume(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.WorkflowTestResumeRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.WorkflowTestResumeResponse)

	c.JSON(consts.StatusOK, resp)
}

// CancelWorkFlow .
// @router /api/workflow_api/cancel [POST]
func CancelWorkFlow(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.CancelWorkFlowRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.CancelWorkFlowResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetWorkFlowProcess .
// @router /api/workflow_api/get_process [GET]
func GetWorkFlowProcess(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.GetWorkflowProcessRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.GetWorkflowProcessResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetNodeExecuteHistory .
// @router /api/workflow_api/get_node_execute_history [GET]
func GetNodeExecuteHistory(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.GetNodeExecuteHistoryRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.GetNodeExecuteHistoryResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetApiDetail .
// @router /api/workflow_api/apiDetail [GET]
func GetApiDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.GetApiDetailRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.GetApiDetailResponse)

	c.JSON(consts.StatusOK, resp)
}

// WorkflowNodeDebugV2 .
// @router /api/workflow_api/nodeDebug [POST]
func WorkflowNodeDebugV2(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.WorkflowNodeDebugV2Request
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.WorkflowNodeDebugV2Response)

	c.JSON(consts.StatusOK, resp)
}

// GetWorkflowUploadAuthToken .
// @router /api/workflow_api/upload/auth_token [POST]
func GetWorkflowUploadAuthToken(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.GetUploadAuthTokenRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.GetUploadAuthTokenResponse)

	c.JSON(consts.StatusOK, resp)
}

// SignImageURL .
// @router /api/workflow_api/sign_image_url [POST]
func SignImageURL(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.SignImageURLRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.SignImageURLResponse)

	c.JSON(consts.StatusOK, resp)
}

// CreateProjectConversationDef .
// @router /api/workflow_api/project_conversation/create [POST]
func CreateProjectConversationDef(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.CreateProjectConversationDefRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.CreateProjectConversationDefResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateProjectConversationDef .
// @router /api/workflow_api/project_conversation/update [POST]
func UpdateProjectConversationDef(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.UpdateProjectConversationDefRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.UpdateProjectConversationDefResponse)

	c.JSON(consts.StatusOK, resp)
}

// DeleteProjectConversationDef .
// @router /api/workflow_api/project_conversation/delete [POST]
func DeleteProjectConversationDef(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.DeleteProjectConversationDefRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.DeleteProjectConversationDefResponse)

	c.JSON(consts.StatusOK, resp)
}

// ListProjectConversationDef .
// @router /api/workflow_api/project_conversation/list [GET]
func ListProjectConversationDef(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.ListProjectConversationRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.ListProjectConversationResponse)

	c.JSON(consts.StatusOK, resp)
}

// ListRootSpans .
// @router /api/workflow_api/list_spans [POST]
func ListRootSpans(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.ListRootSpansRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.ListRootSpansResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetTraceSDK .
// @router /api/workflow_api/get_trace [POST]
func GetTraceSDK(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.GetTraceSDKRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.GetTraceSDKResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetWorkflowDetail .
// @router /api/workflow_api/workflow_detail [POST]
func GetWorkflowDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.GetWorkflowDetailRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.GetWorkflowDetailResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetWorkflowDetailInfo .
// @router /api/workflow_api/workflow_detail_info [POST]
func GetWorkflowDetailInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.GetWorkflowDetailInfoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.GetWorkflowDetailInfoResponse)

	c.JSON(consts.StatusOK, resp)
}

// ValidateTree .
// @router /api/workflow_api/validate_tree [POST]
func ValidateTree(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.ValidateTreeRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.ValidateTreeResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetChatFlowRole .
// @router /api/workflow_api/chat_flow_role/get [GET]
func GetChatFlowRole(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.GetChatFlowRoleRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.GetChatFlowRoleResponse)

	c.JSON(consts.StatusOK, resp)
}

// CreateChatFlowRole .
// @router /api/workflow_api/chat_flow_role/create [POST]
func CreateChatFlowRole(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.CreateChatFlowRoleRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.CreateChatFlowRoleResponse)

	c.JSON(consts.StatusOK, resp)
}

// DeleteChatFlowRole .
// @router /api/workflow_api/chat_flow_role/delete [POST]
func DeleteChatFlowRole(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.DeleteChatFlowRoleRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.DeleteChatFlowRoleResponse)

	c.JSON(consts.StatusOK, resp)
}

// ListPublishWorkflow .
// @router /api/workflow_api/list_publish_workflow [POST]
func ListPublishWorkflow(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.ListPublishWorkflowRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.ListPublishWorkflowResponse)

	c.JSON(consts.StatusOK, resp)
}

// OpenAPIRunFlow .
// @router /v1/workflow/run [POST]
func OpenAPIRunFlow(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.OpenAPIRunFlowRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.OpenAPIRunFlowResponse)

	c.JSON(consts.StatusOK, resp)
}

// OpenAPIStreamRunFlow .
// @router /v1/workflow/stream_run [POST]
func OpenAPIStreamRunFlow(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.OpenAPIRunFlowRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.OpenAPIStreamRunFlowResponse)

	c.JSON(consts.StatusOK, resp)
}

// OpenAPIStreamResumeFlow .
// @router /v1/workflow/stream_resume [POST]
func OpenAPIStreamResumeFlow(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.OpenAPIStreamResumeFlowRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.OpenAPIStreamRunFlowResponse)

	c.JSON(consts.StatusOK, resp)
}

// OpenAPIGetWorkflowRunHistory .
// @router /v1/workflow/get_run_history [GET]
func OpenAPIGetWorkflowRunHistory(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.GetWorkflowRunHistoryRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.GetWorkflowRunHistoryResponse)

	c.JSON(consts.StatusOK, resp)
}

// OpenAPIChatFlowRun .
// @router /v1/workflows/chat [POST]
func OpenAPIChatFlowRun(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.ChatFlowRunRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.ChatFlowRunResponse)

	c.JSON(consts.StatusOK, resp)
}

// OpenAPIGetWorkflowInfo .
// @router /v1/workflows/:workflow_id [GET]
func OpenAPIGetWorkflowInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.OpenAPIGetWorkflowInfoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(workflow.OpenAPIGetWorkflowInfoResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetCardList .
// @router /api/workflow_api/card/list [POST]
func GetCardList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req workflow.GetCardListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 调用外部卡片API
	cardList, err := callExternalCardAPI(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, &workflow.GetCardListResponse{
			Code:     500,
			Msg:      fmt.Sprintf("Failed to fetch card list: %v", err),
			BaseResp: &base.BaseResp{StatusMessage: "Internal Server Error"},
		})
		return
	}

	resp := &workflow.GetCardListResponse{
		Code: 0,
		Msg:  "Success",
		Data: cardList,
		BaseResp: &base.BaseResp{
			StatusCode:    0,
			StatusMessage: "Success",
		},
	}

	c.JSON(consts.StatusOK, resp)
}

// 外部API请求结构
type ExternalCardRequest struct {
	Body struct {
		PageNo           string `json:"pageNo"`
		PageSize         string `json:"pageSize"`
		SassWorkspaceId  string `json:"sassWorkspaceId"`
		SearchValue      string `json:"searchValue"`
		CardName         string `json:"cardName"`
		CardCode         string `json:"cardCode"`
		AgentId          string `json:"agentId"`
		ApplyScene       string `json:"applyScene"`
		CardClassId      string `json:"cardClassId"`
		CardId           string `json:"cardId"`
		CardPicUrl       string `json:"cardPicUrl"`
		Channel          string `json:"channel"`
		Code             string `json:"code"`
		CreateTime       string `json:"createTime"`
		CreatedBy        bool   `json:"createdBy"`
		GreyConfigInfo   string `json:"greyConfigInfo"`
		GreyNum          string `json:"greyNum"`
		Id               string `json:"id"`
		IsAdd            string `json:"isAdd"`
		JsFileUrl        string `json:"jsFileUrl"`
		MainUrl          string `json:"mainUrl"`
		Memo             string `json:"memo"`
		ModuleName       string `json:"moduleName"`
		PicUrl           string `json:"picUrl"`
		Platform         string `json:"platform"`
		PlatformStatus   string `json:"platformStatus"`
		PlatformValue    string `json:"platformValue"`
		PreviewSchema    string `json:"previewSchema"`
		PublishMode      string `json:"publishMode"`
		PublishStatus    string `json:"publishStatus"`
		PublishType      string `json:"publishType"`
		RealGreyEndtime  string `json:"realGreyEndtime"`
		ResourceType     string `json:"resourceType"`
		SassAppId        string `json:"sassAppId"`
		SchemaValue      string `json:"schemaValue"`
		ServiceModuleId  string `json:"serviceModuleId"`
		ServiceName      string `json:"serviceName"`
		SkeletonScreen   string `json:"skeletonScreen"`
		SoLib            string `json:"soLib"`
		StaticMemo       string `json:"staticMemo"`
		StaticType       string `json:"staticType"`
		StaticVersion    string `json:"staticVersion"`
		TaskId           string `json:"taskId"`
		TaskStatus       string `json:"taskStatus"`
		TemplateId       string `json:"templateId"`
		TemplateName     string `json:"templateName"`
		TemplateSchemaValue string `json:"templateSchemaValue"`
		UnzipPath        string `json:"unzipPath"`
		UserId           string `json:"userId"`
		VariableValueList []struct {
			BizChannel               string `json:"bizChannel"`
			VariableDefaultValue     string `json:"variableDefaultValue"`
			VariableDescribe         string `json:"variableDescribe"`
			VariableKey              string `json:"variableKey"`
			VariableName             string `json:"variableName"`
			VariableStructure        string `json:"variableStructure"`
			VariableType             string `json:"variableType"`
		} `json:"variableValueList"`
		Version         string `json:"version"`
		VersionId       string `json:"versionId"`
		WhitelistIds    string `json:"whitelistIds"`
		WhlBusiness     string `json:"whlBusiness"`
	} `json:"body"`
}

// 外部API响应结构
type ExternalCardResponse struct {
	Header struct {
		IcifId       *string `json:"iCIFID"`
		EcifId       *string `json:"eCIFID"`
		ErrorCode    string  `json:"errorCode"`
		ErrorMsg     string  `json:"errorMsg"`
		Encry        *string `json:"encry"`
		TransCode    *string `json:"transCode"`
		Channel      *string `json:"channel"`
		ChannelDate  *string `json:"channelDate"`
		ChannelTime  *string `json:"channelTime"`
		ChannelFlow  *string `json:"channelFlow"`
		Type         *string `json:"type"`
		TransId      *string `json:"transId"`
	} `json:"header"`
	Body struct {
		CardList []struct {
			BizChannel       string `json:"bizChannel"`
			CardClassId      string `json:"cardClassId"`
			CardId           string `json:"cardId"`
			CardName         string `json:"cardName"`
			CardPicUrl       string `json:"cardPicUrl"`
			CardShelfStatus  string `json:"cardShelfStatus"`
			CardShelfTime    string `json:"cardShelfTime"`
			Code             string `json:"code"`
			CreateUserId     string `json:"createUserId"`
			CreateUserName   string `json:"createUserName"`
			PicUrl           string `json:"picUrl"`
			SassAppId        string `json:"sassAppId"`
			SassWorkspaceId  string `json:"sassWorkspaceId"`
		} `json:"cardList"`
		ErrorCode   string `json:"errorCode"`
		ErrorMsg    string `json:"errorMsg"`
		PageNo      string `json:"pageNo"`
		PageSize    string `json:"pageSize"`
		TotalNums   string `json:"totalNums"`
		TotalPages  string `json:"totalPages"`
	} `json:"body"`
}

// callExternalCardAPI 调用外部卡片API
func callExternalCardAPI(ctx context.Context, req *workflow.GetCardListRequest) (*workflow.GetCardListData, error) {
	// 构造外部API请求
	externalReq := ExternalCardRequest{}
	externalReq.Body.PageNo = "1"
	externalReq.Body.PageSize = "200"
	if req.PageNo != nil {
		externalReq.Body.PageNo = fmt.Sprintf("%d", *req.PageNo)
	}
	if req.PageSize != nil {
		externalReq.Body.PageSize = fmt.Sprintf("%d", *req.PageSize)
	}
	externalReq.Body.SassWorkspaceId = req.SassWorkspaceId
	if req.SearchValue != nil {
		externalReq.Body.SearchValue = *req.SearchValue
	}
	if req.CardName != nil {
		externalReq.Body.CardName = *req.CardName
	}
	if req.CardCode != nil {
		externalReq.Body.CardCode = *req.CardCode
	}

	// 设置其他默认值
	externalReq.Body.CreatedBy = true
	externalReq.Body.VariableValueList = []struct {
		BizChannel               string `json:"bizChannel"`
		VariableDefaultValue     string `json:"variableDefaultValue"`
		VariableDescribe         string `json:"variableDescribe"`
		VariableKey              string `json:"variableKey"`
		VariableName             string `json:"variableName"`
		VariableStructure        string `json:"variableStructure"`
		VariableType             string `json:"variableType"`
	}{{}}

	// 序列化请求
	jsonData, err := json.Marshal(externalReq)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal request: %w", err)
	}

	// 创建HTTP请求
	httpReq, err := http.NewRequestWithContext(ctx, "POST", "http://10.10.10.208:8500/aop-web/IDC10030.do", bytes.NewBuffer(jsonData))
	if err != nil {
		return nil, fmt.Errorf("failed to create request: %w", err)
	}

	httpReq.Header.Set("Content-Type", "application/json")
	httpReq.Header.Set("Request-Origion", "SwaggerBootstrapUi")
	httpReq.Header.Set("Accept", "*/*")

	// 发送请求
	client := &http.Client{Timeout: 30 * time.Second}
	resp, err := client.Do(httpReq)
	if err != nil {
		return nil, fmt.Errorf("failed to call external API: %w", err)
	}
	defer resp.Body.Close()

	// 解析响应
	var externalResp ExternalCardResponse
	if err := json.NewDecoder(resp.Body).Decode(&externalResp); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	// 检查外部API响应
	if externalResp.Header.ErrorCode != "0" {
		return nil, fmt.Errorf("external API error: %s", externalResp.Header.ErrorMsg)
	}

	// 转换为内部数据结构
	cardList := make([]*workflow.CardItem, 0, len(externalResp.Body.CardList))
	for _, card := range externalResp.Body.CardList {
		cardItem := &workflow.CardItem{
			CardId:          card.CardId,
			CardName:        card.CardName,
			Code:            card.Code,
			CardPicUrl:      &card.CardPicUrl,
			PicUrl:          &card.PicUrl,
			CardShelfStatus: &card.CardShelfStatus,
			CardShelfTime:   &card.CardShelfTime,
			CreateUserId:    &card.CreateUserId,
			CreateUserName:  &card.CreateUserName,
			SassAppId:       &card.SassAppId,
			SassWorkspaceId: &card.SassWorkspaceId,
			BizChannel:      &card.BizChannel,
			CardClassId:     &card.CardClassId,
		}
		cardList = append(cardList, cardItem)
	}

	return &workflow.GetCardListData{
		CardList:   cardList,
		PageNo:     externalResp.Body.PageNo,
		PageSize:   externalResp.Body.PageSize,
		TotalNums:  externalResp.Body.TotalNums,
		TotalPages: externalResp.Body.TotalPages,
	}, nil
}

/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by hertz generator.

package workflow

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	workflow "github.com/coze-dev/coze-studio/backend/api/model/workflow"
	appworkflow "github.com/coze-dev/coze-studio/backend/application/workflow"
	"github.com/coze-dev/coze-studio/backend/domain/workflow/nodes/cardselector"
	"github.com/coze-dev/coze-studio/backend/pkg/logs"
	"github.com/coze-dev/coze-studio/backend/pkg/sonic"
)

// GetCardList .
// @router /api/workflow_api/card_list [POST]
func GetCardList(ctx context.Context, c *app.RequestContext) {
	logs.CtxInfof(ctx, "GetCardList API called")

	var err error
	var req workflow.GetCardListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		logs.CtxErrorf(ctx, "GetCardList bind and validate error: %v", err)
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	logs.CtxInfof(ctx, "GetCardList request: apiEndpoint=%s, searchKeyword=%s", req.GetApiEndpoint(), req.GetSearchKeyword())

	// 创建卡片选择器服务
	cardService := appworkflow.NewCardSelectorService()

	// 转换filters
	var filters map[string]interface{}
	if req.Filters != nil {
		filters = make(map[string]interface{})
		for k, v := range req.Filters {
			filters[k] = v
		}
	}

	// 调用业务逻辑
	cardList, err := cardService.SearchCards(ctx, req.GetApiEndpoint(), req.GetSearchKeyword(), filters)
	if err != nil {
		logs.CtxErrorf(ctx, "GetCardList service error: %v", err)
		resp := &workflow.GetCardListResponse{
			Code:    500,
			Message: err.Error(),
		}
		c.JSON(consts.StatusOK, resp)
		return
	}

	// 转换结果为FalconCard数组
	falconCards := make([]*workflow.FalconCard, len(cardList))
	for i, card := range cardList {
		if falconCard, ok := card.(cardselector.FalconCard); ok {
			// 转换为workflow包中的FalconCard类型
			falconCards[i] = &workflow.FalconCard{
				CardId:          falconCard.CardID,
				CardName:        falconCard.CardName,
				Code:            falconCard.Code,
				CardClassId:     &falconCard.CardClassID,
				CardPicUrl:      &falconCard.CardPicURL,
				CardShelfStatus: &falconCard.CardShelfStatus,
				CardShelfTime:   &falconCard.CardShelfTime,
				CreateUserId:    &falconCard.CreateUserID,
				CreateUserName:  &falconCard.CreateUserName,
				PicUrl:          &falconCard.PicURL,
				SassAppId:       &falconCard.SassAppID,
				SassWorkspaceId: &falconCard.SassWorkspaceID,
				BizChannel:      &falconCard.BizChannel,
			}
		}
	}

	resp := &workflow.GetCardListResponse{
		Code:    0,
		Message: "success",
		Data: &workflow.CardListData{
			CardList: falconCards,
		},
	}

	logs.CtxInfof(ctx, "GetCardList response: code=%d, cardCount=%d", resp.Code, len(falconCards))
	c.JSON(consts.StatusOK, resp)
}

// GetCardDetail .
// @router /api/workflow_api/card_detail [POST]
func GetCardDetail(ctx context.Context, c *app.RequestContext) {
	logs.CtxInfof(ctx, "GetCardDetail API called")

	var err error
	var req workflow.GetCardDetailRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		logs.CtxErrorf(ctx, "GetCardDetail bind and validate error: %v", err)
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	logs.CtxInfof(ctx, "GetCardDetail request: apiEndpoint=%s, cardId=%s", req.GetApiEndpoint(), req.GetCardId())

	// 创建卡片选择器服务
	cardService := appworkflow.NewCardSelectorService()

	// 调用业务逻辑
	cardDetail, err := cardService.GetCardDetail(ctx, req.GetApiEndpoint(), req.GetCardId())
	if err != nil {
		logs.CtxErrorf(ctx, "GetCardDetail service error: %v", err)
		resp := &workflow.GetCardDetailResponse{
			Code:    500,
			Message: err.Error(),
		}
		c.JSON(consts.StatusOK, resp)
		return
	}

	// 转换结果为CardDetail结构体
	var cardDetailData *workflow.CardDetail
	if cardDetailBody, ok := cardDetail.(map[string]interface{}); ok {
		// 从map中提取数据并转换为CardDetail
		cardDetailData = &workflow.CardDetail{
			CardId:         getString(cardDetailBody, "cardId"),
			CardName:       getString(cardDetailBody, "cardName"),
			CardPicUrl:     getString(cardDetailBody, "cardPicUrl"),
			Code:           getString(cardDetailBody, "code"),
			MainUrl:        getString(cardDetailBody, "mainUrl"),
			SkeletonScreen: getString(cardDetailBody, "skeletonScreen"),
			Version:        getString(cardDetailBody, "version"),
			ParamList:      convertParamList(cardDetailBody["paramList"]),
		}
	} else {
		// 如果不是map，尝试JSON解析
		cardBytes, _ := sonic.Marshal(cardDetail)
		var tempDetail map[string]interface{}
		if err := sonic.Unmarshal(cardBytes, &tempDetail); err == nil {
			cardDetailData = &workflow.CardDetail{
				CardId:         getString(tempDetail, "cardId"),
				CardName:       getString(tempDetail, "cardName"),
				CardPicUrl:     getString(tempDetail, "cardPicUrl"),
				Code:           getString(tempDetail, "code"),
				MainUrl:        getString(tempDetail, "mainUrl"),
				SkeletonScreen: getString(tempDetail, "skeletonScreen"),
				Version:        getString(tempDetail, "version"),
				ParamList:      convertParamList(tempDetail["paramList"]),
			}
		}
	}

	resp := &workflow.GetCardDetailResponse{
		Code:    0,
		Message: "success",
		Data:    cardDetailData,
	}

	logs.CtxInfof(ctx, "GetCardDetail response: code=%d", resp.Code)
	c.JSON(consts.StatusOK, resp)
}

// getString 从map中安全地获取字符串值
func getString(m map[string]interface{}, key string) string {
	if val, ok := m[key]; ok {
		if str, ok := val.(string); ok {
			return str
		}
	}
	return ""
}

// convertParamList 转换参数列表
func convertParamList(paramListInterface interface{}) []*workflow.CardParam {
	if paramList, ok := paramListInterface.([]interface{}); ok {
		var params []*workflow.CardParam
		for _, paramInterface := range paramList {
			if paramMap, ok := paramInterface.(map[string]interface{}); ok {
				param := &workflow.CardParam{
					ParamId:         getString(paramMap, "paramId"),
					ParamName:       getString(paramMap, "paramName"),
					ParamType:       getString(paramMap, "paramType"),
					ParamDesc:       getString(paramMap, "paramDesc"),
					IsRequired:      getString(paramMap, "isRequired"),
					BizChannel:      getOptionalString(paramMap, "bizChannel"),
					SassAppId:       getOptionalString(paramMap, "sassAppId"),
					SassWorkspaceId: getOptionalString(paramMap, "sassWorkspaceId"),
					Children:        convertParamList(paramMap["children"]),
				}
				params = append(params, param)
			}
		}
		return params
	}
	return nil
}

// getOptionalString 从map中安全地获取可选字符串值
func getOptionalString(m map[string]interface{}, key string) *string {
	if val, ok := m[key]; ok {
		if str, ok := val.(string); ok && str != "" {
			return &str
		}
	}
	return nil
}
